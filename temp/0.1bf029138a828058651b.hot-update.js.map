{"version":3,"file":"0.1bf029138a828058651b.hot-update.js","sources":["webpack:///./src/lib/manager/index.js?7637"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Mediator = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _index = require('../observer/index');\n\nvar _index2 = require('../swipe/index.js');\n\nvar _index3 = _interopRequireDefault(_index2);\n\nvar _index4 = require('./dispatch/index');\n\nvar _hooks = require('./hooks');\n\nvar _filter = require('./filter');\n\nvar _dynamicApi = require('../dynamic-api');\n\nvar _dynamicApi2 = _interopRequireDefault(_dynamicApi);\n\nvar _index5 = require('../util/index');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /*********************************************************************\r\n场景容器构造器\r\n构件页面级容器\r\n翻页全局事件\r\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\r\nn\n//定义访问器\n\n\n/**\r\n * 部分配置文件\r\n */\nvar pageConf = {\n    //数据库定义的翻页模式\n    //用来兼容客户端的制作模式\n    //妙妙学模式处理，多页面下翻页切换\n    //0 翻页滑动\n    //1 没有滑动过程,直接切换页面\n    'pageFlip': 0,\n\n    //翻页模式\n    //根据页码数决定,主要是优化一些代码\n    //true  是多页面模式,支持翻页滑动\n    //false 单页面模式,不能翻页，只能跳转\n    'pageMode': false,\n\n    //是否多场景加载\n    //单页场景 false\n    //多场景   true\n    'multiScenario': false,\n\n    //是否为连续页面\n    //通过pageMode的参数定义\n    'multiplePages': false\n};\n\n/**\r\n * 配置多页面参数\r\n * @return {[type]} [description]\r\n */\nvar configMultiple = function configMultiple(options) {\n    //如果是epub,强制转换为单页面\n    if (Xut.IBooks.Enabled) {\n        options.multiplePages = false;\n    } else {\n        //判断多页面情况\n        //1 数据库定义\n        //2 系统优化\n        options.multiplePages = options.pageFlip ? options.pageFlip : options.pageMode ? true : false;\n    }\n};\n\n/**\r\n * 判断处理那个页面层次\r\n * 找到pageType类型\r\n * 项目分4个层\r\n * page mater page浮动 mater浮动\r\n * 通过\r\n * 因为冒泡的元素，可能是页面层，也可能是母板上的\r\n * @return {Boolean} [description]\r\n */\nvar isBelong = function isBelong(target) {\n    var pageType = 'page';\n    if (target.dataset && target.dataset.belong) {\n        pageType = target.dataset.belong;\n    }\n    return pageType;\n};\n\n/**\r\n * 阻止元素的默认行为\r\n * 在火狐下面image带有href的行为\r\n * 会自动触发另存为\r\n * @return {[type]} [description]\r\n *\r\n * 2016.3.18\r\n * 妙妙学 滚动插件默认行为被阻止\r\n *\r\n * 2016.7.26\r\n * 读库强制PC模式了\r\n */\nvar preventDefault = function preventDefault(evtObj, target) {\n    //var tagName = target.nodeName.toLowerCase();\n    if (Xut.plat.isBrowser && !Xut.IBooks.Enabled && !window.MMXCONFIG && !window.DUKUCONFIG) {\n        evtObj.preventDefault && evtObj.preventDefault();\n    }\n};\n\nvar Mediator = function (_Observer) {\n    _inherits(Mediator, _Observer);\n\n    function Mediator(parameter) {\n        _classCallCheck(this, Mediator);\n\n        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Mediator).call(this));\n\n        var vm = _this;\n\n        //配置文件\n        var options = vm.options = _.extend(pageConf, parameter, {\n            pageFlip: Xut.config.pageFlip\n        });\n\n        //配置多页面参数\n        configMultiple(options);\n\n        var $globalEvent = vm.$globalEvent = new _index3.default(options);\n        var $dispatch = vm.$dispatch = new _index4.Dispatch(vm);\n\n        //如果是主场景,才能切换系统工具栏\n        if (options.multiplePages) {\n            _this.addTools(vm);\n        }\n\n        //事件句柄对象\n        var handlerObj = null;\n\n        /**\r\n         * 过滤器.全局控制函数\r\n         * return true 阻止页面滑动\r\n         */\n        $globalEvent.$watch('onFilter', function (hookCallback, point, evtObj) {\n            var target = point.target;\n            //阻止默认行为\n            preventDefault(evtObj, target);\n            //页面类型\n            var pageType = isBelong(target);\n            //根节点\n            var parentNode = $globalEvent.findRootElement(point, pageType);\n            //执行过滤处理\n            handlerObj = _filter.filterProcessor.call(parentNode, point, pageType);\n            //停止翻页,针对content对象可以拖动,滑动的情况处理\n            if (!handlerObj || handlerObj.attribute === 'disable') {\n                hookCallback();\n            }\n        });\n\n        /**\r\n         * 触屏滑动,通知pageMgr处理页面移动\r\n         * @return {[type]} [description]\r\n         */\n        $globalEvent.$watch('onMove', function (data) {\n            $dispatch.move(data);\n        });\n\n        /**\r\n         * 触屏松手点击\r\n         * 无滑动\r\n         */\n        $globalEvent.$watch('onTap', function (pageIndex, hookCallback) {\n            if (handlerObj) {\n                if (handlerObj.handlers) {\n                    handlerObj.handlers(handlerObj.elem, handlerObj.attribute, handlerObj.rootNode, pageIndex);\n                } else {\n                    if (!Xut.Contents.Canvas.getIsTap()) {\n                        vm.$emit('change:toggleToolbar');\n                    }\n                }\n                handlerObj = null;\n                hookCallback();\n            }\n        });\n\n        /**\r\n         * 触屏滑动,通知ProcessMgr关闭所有激活的热点\r\n         * @return {[type]}          [description]\r\n         */\n        $globalEvent.$watch('onUpSlider', function (pointers) {\n            $dispatch.suspend(pointers);\n        });\n\n        /**\r\n         * 翻页动画完成回调\r\n         * @return {[type]}              [description]\r\n         */\n        $globalEvent.$watch('onComplete', function (direction, pagePointer, unfliplock, isQuickTurn) {\n            $dispatch.complete(direction, pagePointer, unfliplock, isQuickTurn);\n        });\n\n        /**\r\n         * 切换页面\r\n         * @return {[type]}      [description]\r\n         */\n        $globalEvent.$watch('onJumpPage', function (data) {\n            $dispatch.jumpPage(data);\n        });\n\n        /**\r\n         * 退出应用\r\n         * @return {[type]}      [description]\r\n         */\n        $globalEvent.$watch('onDropApp', function (data) {\n            window.GLOBALIFRAME && Xut.publish('magazine:dropApp');\n        });\n\n        /**\r\n         * 母板移动反馈\r\n         * 只有存在data-parallaxProcessed\r\n         * 才需要重新激活对象\r\n         * 删除parallaxProcessed\r\n         */\n        $globalEvent.$watch('onMasterMove', function (hindex, target) {\n            if (/Content/i.test(target.id) && target.getAttribute('data-parallaxProcessed')) {\n                $dispatch.masterMgr && $dispatch.masterMgr.reactivation(target);\n            }\n        });\n\n        vm.$overrideApi();\n        return _this;\n    }\n\n    /**\r\n     * 系统工具栏\r\n     */\n\n\n    _createClass(Mediator, [{\n        key: 'addTools',\n        value: function addTools(vm) {\n\n            _.extend(_hooks.delegateHooks, {\n\n                /**\r\n                 * li节点,多线程创建的时候处理滑动\r\n                 */\n                'data-container': function dataContainer() {\n                    vm.$emit('change:toggleToolbar');\n                },\n\n\n                /**\r\n                 * 是背景层\r\n                 */\n                'data-multilayer': function dataMultilayer() {\n                    //改变工具条状态\n                    vm.$emit('change:toggleToolbar');\n                },\n\n\n                /**\r\n                 * 默认content元素可以翻页\r\n                 */\n                'data-behavior': function dataBehavior(target, attribute, rootNode, pageIndex) {\n                    //没有事件的元素,即可翻页又可点击切换工具栏\n                    if (attribute == 'click-swipe') {\n                        vm.$emit('change:toggleToolbar');\n                    }\n                }\n            });\n        }\n    }]);\n\n    return Mediator;\n}(_index.Observer);\n\nvar medProto = Mediator.prototype;\n\n/**\r\n * 是否多场景模式\r\n */\n(0, _index5.defAccess)(medProto, '$multiScenario', {\n    get: function get() {\n        return this.options.multiScenario;\n    }\n});\n\n/**\r\n * 动态注入对象接口\r\n * 注入对象管理,注册所有widget组件对象\r\n *  content类型  创建时注册\r\n *  widget类型   执行时注册\r\n *  widget 包括 视频 音频 Action 子文档 弹出口 类型\r\n *  这种类型是冒泡处理，无法传递钩子，直接用这个接口与场景对接\r\n */\n(0, _index5.defAccess)(medProto, '$injectionComponent', {\n    set: function set(regData) {\n        var injection;\n        if (injection = this.$dispatch[regData.pageType + 'Mgr']) {\n            injection.abstractAssistPocess(regData.pageIndex, function (pageObj) {\n                pageObj.baseRegisterComponent.call(pageObj, regData.widget);\n            });\n        } else {\n            console.log('注册injection失败,regData=' + regData);\n        }\n    }\n});\n\n/**\r\n * 得到当前的视图页面\r\n * @return {[type]}   [description]\r\n */\n(0, _index5.defAccess)(medProto, '$curVmPage', {\n    get: function get() {\n        return this.$dispatch.pageMgr.abstractGetPageObj(this.$globalEvent.getHindex());\n    }\n});\n\n/**\r\n *  监听viewmodel内部的状态的改变,触发后传入值\r\n *\r\n *  与状态有关的change:\r\n *      翻页\r\n *          'flipOver' : function(pageIndex) {},\r\n *\r\n *      切换工具栏\r\n *          'toggleToolbar' : function(state, pointer) {},\r\n *\r\n *      复位工具栏\r\n *          'resetToolbar'  : function() {},\r\n *\r\n *      隐藏下一页按钮\r\n *          'hideNext'   : function(state) {},\r\n *\r\n *      显示下一页按钮\r\n *          'showNext'   : function() {}\r\n *\r\n *  与创建相关\r\n *      创建完毕回调\r\n *          'createComplete': null,\r\n *      创建后中断自动运行回调\r\n *          'suspendAutoCallback': null\r\n *\r\n */\n(0, _index5.defProtected)(medProto, '$bind', function (key, callback) {\n    var vm = this;\n    vm.$watch('change:' + key, function () {\n        callback.apply(vm, arguments);\n    });\n});\n\n/**\r\n * 创建页面\r\n * @return {[type]} [description]\r\n */\n(0, _index5.defProtected)(medProto, '$init', function () {\n    this.$dispatch.initCreate();\n});\n\n/**\r\n * 运动动画\r\n * @return {[type]} [description]\r\n */\n(0, _index5.defProtected)(medProto, '$run', function () {\n    var vm = this;\n    vm.$dispatch.pageMgr.activateAutoRuns(vm.$globalEvent.getHindex(), Xut.Presentation.GetPageObj());\n});\n\n/**\r\n * 复位对象\r\n * @return {[type]} [description]\r\n */\n(0, _index5.defProtected)(medProto, '$reset', function () {\n    return this.$dispatch.pageMgr.resetOriginal(this.$globalEvent.getHindex());\n});\n\n/**\r\n * 停止所有任务\r\n * @return {[type]} [description]\r\n */\n(0, _index5.defProtected)(medProto, '$suspend', function () {\n    Xut.Application.Suspend({\n        skipMedia: true //跨页面不处理\n    });\n});\n\n/**\r\n * 销毁场景内部对象\r\n * @return {[type]} [description]\r\n */\n(0, _index5.defProtected)(medProto, '$destroy', function () {\n    this.$off();\n    this.$globalEvent.destroy();\n    this.$dispatch.destroy();\n    this.$dispatch = null;\n    this.$globalEvent = null;\n});\n\n/**\r\n * 设置所有API接口\r\n * @return {[type]} [description]\r\n */\n(0, _index5.defProtected)(medProto, '$overrideApi', function () {\n    (0, _dynamicApi2.default)(this);\n});\n\nexports.Mediator = Mediator;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/lib/manager/index.js\n ** module id = 118\n ** module chunks = 0\n **/"],"mappingssourceRoot":""}