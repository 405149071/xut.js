{"version":3,"file":"0.858f97aea62809ca57ea.hot-update.js","sources":["webpack:///./src/lib/scenario/scenario.js?5a37"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.SceneFactory = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _index = require('../config/index');\n\nvar _sysbar = require('../toolbar/sysbar');\n\nvar _sysbar2 = _interopRequireDefault(_sysbar);\n\nvar _fnbar = require('../toolbar/fnbar');\n\nvar _fnbar2 = _interopRequireDefault(_fnbar);\n\nvar _index2 = require('../toolbar/bookbar/index');\n\nvar _index3 = _interopRequireDefault(_index2);\n\nvar _layout = require('./layout');\n\nvar _controller = require('./controller');\n\nvar _index4 = require('../manager/index');\n\nvar _barconf = require('./barconf');\n\nvar _nexttick = require('../nexttick');\n\nvar _nexttick2 = _interopRequireDefault(_nexttick);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * 找到对应容器\r\n * @return {[type]}            [description]\r\n */\nvar findContainer = function findContainer(elements, scenarioId, isMain) {\n    return function (pane, parallax) {\n        var node;\n        if (isMain) {\n            node = '#' + pane;\n        } else {\n            node = '#' + parallax + scenarioId;\n        }\n        return elements.find(node)[0];\n    };\n};\n\n/**\r\n * 如果启动了缓存记录\r\n * 加载新的场景\r\n * @return {[type]} [description]\r\n */\nvar checkHistory = function checkHistory(history) {\n\n    //直接启用快捷调试模式\n    if (_index.config.deBugHistory) {\n        Xut.View.LoadScenario(_index.config.deBugHistory);\n        return true;\n    }\n\n    //如果有历史记录\n    if (history) {\n        var scenarioInfo = _controller.sceneController.seqReverse(history);\n        if (scenarioInfo) {\n            scenarioInfo = scenarioInfo.split('-');\n            Xut.View.LoadScenario({\n                'scenarioId': scenarioInfo[0],\n                'chapterId': scenarioInfo[1],\n                'pageIndex': scenarioInfo[2]\n            });\n            return true;\n        } else {\n            return false;\n        }\n    }\n};\n\n/**\r\n * 场景创建类\r\n * @param  {[type]} seasonId               [description]\r\n * @param  {[type]} chapterId              [description]\r\n * @param  {[type]} createCompleteCallback [创建完毕通知回调]\r\n * @param  {[type]} createMode             [创建模式]\r\n * @param  {[type]} sceneChainId           [场景ID链,用于后退按钮加载前一个场景]\r\n * @return {[type]}                        [description]\r\n */\n\nvar SceneFactory = exports.SceneFactory = function () {\n    function SceneFactory(data) {\n        var _this = this;\n\n        _classCallCheck(this, SceneFactory);\n\n        //基本配置信息\n        var seasonId = data.seasonId;\n        var chapterId = data.chapterId;\n\n        var options = _.extend(this, data, {\n            'scenarioId': seasonId,\n            'chapterId': chapterId,\n            'container': $('#xut-scene-container')\n        });\n\n        //创建主场景\n        this._createHTML(options, function () {\n            //配置工具栏行为\n            if (!Xut.IBooks.Enabled) {\n                _.extend(_this, _this._initToolBar());\n            }\n            //构建Mediator对象\n            _this._createMediator();\n            //注入场景管理\n            _controller.sceneController.add(seasonId, chapterId, _this);\n        });\n    }\n\n    /**\r\n     * 创建场景\r\n     * @return {[type]} [description]\r\n     */\n\n\n    _createClass(SceneFactory, [{\n        key: '_createHTML',\n        value: function _createHTML(options, callback) {\n\n            //如果是静态文件执行期\n            //支持Xut.IBooks模式\n            //都不需要创建节点\n            if (Xut.IBooks.runMode()) {\n                this.elements = $('#xut-main-scene');\n                callback();\n                return;\n            }\n\n            var str = void 0;\n\n            if (options.isMain) {\n                str = (0, _layout.home)();\n            } else {\n                str = (0, _layout.scene)(this.scenarioId);\n            }\n\n            this.elements = $(str);\n\n            (0, _nexttick2.default)({\n                'container': this.container,\n                'content': this.elements\n            }, callback);\n        }\n\n        /**\r\n         *\r\n         * 配置工具栏行为\r\n         *  1.  工具栏类型\r\n         *  tbType：(如果用户没有选择任何工具栏信息处理，tbType字段就为空)\r\n         *   0  禁止工具栏\r\n         *   1  系统工具栏   - 显示IOS系统工具栏\r\n         *   2  场景工具栏   - 显示关闭按钮\r\n         *   3  场景工具栏   - 显示返回按钮\r\n         *   4  场景工具栏   - 显示顶部小圆点式标示\r\n         *\r\n         *  2.  翻页模式\r\n         *  pageMode：(如果用户没有选择任何处理，pageMode字段就为空)\r\n         *   0禁止滑动\r\n         *   1 允许滑动无翻页按钮\r\n         *   2 允许滑动带翻页按钮\r\n         *\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: '_initToolBar',\n        value: function _initToolBar() {\n            var scenarioId = this.scenarioId;\n            var pageTotal = this.pageTotal;\n            var pageIndex = this.pageIndex;\n            var elements = this.elements;\n            var findControlBar = function findControlBar() {\n                return elements.find('#controlBar');\n            };\n\n            //工具栏配置信息\n            var conf = void 0;\n\n            //主场景工具栏设置\n            if (this.isMain) {\n                conf = (0, _barconf.pMainBar)(scenarioId, pageTotal);\n\n                if (_index.config.scrollPaintingMode) {\n                    //word模式,自动启动工具条\n                    this.sToolbar = new _index3.default({\n                        container: elements,\n                        controlBar: findControlBar(),\n                        pageMode: conf.pageMode\n                    });\n                } else if (_.some(conf.tbType)) {\n                    //普通模式\n                    this.sToolbar = new _sysbar2.default({\n                        container: elements,\n                        controlBar: findControlBar(),\n                        pageTotal: pageTotal,\n                        currentPage: pageIndex + 1,\n                        pageMode: conf.pageMode\n                    });\n                }\n            } else {\n                //副场景\n                conf = (0, _barconf.pDeputyBar)(this.barInfo, pageTotal);\n                //创建工具栏\n                if (conf) {\n                    this.cToolbar = new _fnbar2.default({\n                        id: scenarioId,\n                        container: elements,\n                        tbType: conf.tbType,\n                        pageTotal: pageTotal,\n                        currentPage: pageIndex,\n                        pageMode: conf.pageMode\n                    });\n                }\n            }\n\n            return conf;\n        }\n\n        /**\r\n         * 构建创建对象\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: '_createMediator',\n        value: function _createMediator() {\n\n            var self = this;\n            var scenarioId = this.scenarioId;\n            var pageTotal = this.pageTotal;\n            var pageIndex = this.pageIndex;\n            var elements = this.elements;\n            var pageMode = this.pageMode;\n            var isMain = this.isMain;\n            var tempfind = findContainer(elements, scenarioId, isMain);\n            //页面容器\n            var scenarioPage = tempfind('xut-page-container', 'scenarioPage-');\n            //视差容器\n            var scenarioMaster = tempfind('xut-master-container', 'scenarioMaster-');\n\n            //场景容器对象\n            var vm = this.vm = new _index4.Mediator({\n                'container': this.elements[0],\n                'pageMode': pageMode,\n                'multiScenario': !isMain,\n                'rootPage': scenarioPage,\n                'rootMaster': scenarioMaster,\n                'initIndex': pageIndex, //保存索引从0开始\n                'pagetotal': pageTotal,\n                'sectionRang': this.sectionRang,\n                'scenarioId': scenarioId,\n                'chapterId': this.chapterId,\n                'isInApp': this.isInApp //提示页面\n            });\n\n            /**\r\n             * 配置选项\r\n             * @type {[type]}\r\n             */\n            var isToolbar = this.isToolbar = this.cToolbar ? this.cToolbar : this.sToolbar;\n\n            /**\r\n             * 监听翻页\r\n             * 用于更新页码\r\n             * @return {[type]} [description]\r\n             */\n            vm.$bind('pageUpdate', function (pageIndex) {\n                isToolbar && isToolbar.updatePointer(pageIndex);\n            });\n\n            /**\r\n             * 显示下一页按钮\r\n             * @return {[type]} [description]\r\n             */\n            vm.$bind('showNext', function () {\n                isToolbar && isToolbar.showNext();\n            });\n\n            /**\r\n             * 隐藏下一页按钮\r\n             * @return {[type]} [description]\r\n             */\n            vm.$bind('hideNext', function () {\n                isToolbar && isToolbar.hideNext();\n            });\n\n            /**\r\n             * 显示上一页按钮\r\n             * @return {[type]} [description]\r\n             */\n            vm.$bind('showPrev', function () {\n                isToolbar && isToolbar.showPrev();\n            });\n\n            /**\r\n             * 隐藏上一页按钮\r\n             * @return {[type]} [description]\r\n             */\n            vm.$bind('hidePrev', function () {\n                isToolbar && isToolbar.hidePrev();\n            });\n\n            /**\r\n             * 切换工具栏\r\n             * @return {[type]} [description]\r\n             */\n            vm.$bind('toggleToolbar', function (state, pointer) {\n                isToolbar && isToolbar.toggle(state, pointer);\n            });\n\n            /**\r\n             * 复位工具栏\r\n             * @return {[type]} [description]\r\n             */\n            vm.$bind('resetToolbar', function () {\n                self.sToolbar && self.sToolbar.reset();\n            });\n\n            /**\r\n             * 监听创建完成\r\n             * @return {[type]} [description]\r\n             */\n            vm.$bind('createComplete', function (nextAction) {\n                self.complete && setTimeout(function () {\n                    if (isMain) {\n                        self.complete(function () {\n                            Xut.View.HideBusy();\n                            //检测是不是有缓存加载\n                            if (!checkHistory(self.history)) {\n                                //指定自动运行的动作\n                                nextAction && nextAction();\n                            }\n                            //全局接口,应用加载完毕\n                            Xut.Application.AddEventListener();\n                        });\n                    } else {\n                        self.complete(nextAction);\n                    }\n                }, 200);\n            });\n\n            //如果是读酷端加载\n            if (window.DUKUCONFIG && isMain && window.DUKUCONFIG.success) {\n                window.DUKUCONFIG.success();\n                vm.$init();\n                //如果是客户端加载\n            } else if (window.CLIENTCONFIGT && isMain && window.CLIENTCONFIGT.success) {\n                window.CLIENTCONFIGT.success();\n                vm.$init();\n            } else {\n                //正常加载\n                vm.$init();\n            }\n\n            /**\r\n             * 绑定桌面调试\r\n             */\n            _index.config.debugMode && Xut.plat.isBrowser && this._bindWatch();\n        }\n\n        /**\r\n         * 为桌面测试\r\n         * 绑定调试\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: '_bindWatch',\n        value: function _bindWatch() {\n            // for test\n            if (Xut.plat.isBrowser) {\n                var vm = this.vm;\n                this.testWatch = $(\".xut-control-pageindex\").click(function () {\n                    console.log('主场景', vm);\n                    console.log('主场景容器', vm.$scheduler.pageMgr.Collections);\n                    console.log('主场景视觉差容器', vm.$scheduler.parallaxMgr && vm.$scheduler.parallaxMgr.Collections);\n                    console.log('多场景', _controller.sceneController.expose());\n                    console.log('数据库', Xut.data);\n                });\n            }\n        }\n\n        /**\r\n         * 销毁场景对象\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            /**\r\n             * 桌面调试\r\n             */\n            if (this.testWatch) {\n                this.testWatch.off();\n                this.testWatch = null;\n            }\n\n            /**\r\n             * 销毁当前场景\r\n             */\n            this.vm.$destroy();\n\n            /**\r\n             * 销毁工具栏\r\n             */\n            if (this.isToolbar) {\n                this.isToolbar.destroy();\n                this.isToolbar = null;\n            }\n\n            this.container = null;\n\n            //销毁节点\n            this.elements.off();\n            this.elements.remove();\n            this.elements = null;\n\n            //销毁引用\n            _controller.sceneController.remove(this.scenarioId);\n        }\n    }]);\n\n    return SceneFactory;\n}();\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/lib/scenario/scenario.js\n ** module id = 143\n ** module chunks = 0\n **/"],"mappingssourceRoot":""}