{"version":3,"file":"0.1b201b668a8034680243.hot-update.js","sources":["webpack:///./src/lib/manager/dispatch/index.js?0f38"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Dispatch = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*********************************************************************\r\n调度器 生成页面模块\r\nr\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *            处理：事件动作分派\r\n调度：\r\nageMgr     模块\r\nasterMgr 模块\r\nr\nn\n\nvar _stroage = require('../../util/stroage');\n\nvar _page = require('../page');\n\nvar _page2 = _interopRequireDefault(_page);\n\nvar _master = require('../master');\n\nvar _master2 = _interopRequireDefault(_master);\n\nvar _switch = require('./switch');\n\nvar _switch2 = _interopRequireDefault(_switch);\n\nvar _controller = require('../../scenario/controller');\n\nvar _index = require('../../toolbar/navbar/index');\n\nvar _depend = require('./depend');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Dispatch = exports.Dispatch = function () {\n    function Dispatch(vm) {\n        _classCallCheck(this, Dispatch);\n\n        this.vm = vm;\n\n        this.options = vm.options;\n\n        /**\r\n         * 创建前景页面管理模块\r\n         * @type {PageMgr}\r\n         */\n        this.pageMgr = new _page2.default(vm);\n\n        /**\r\n         * 检测是否需要创母版模块\r\n         * @return {[type]} [description]\r\n         */\n        if ((0, _depend.checkMasterCreate)()) {\n            this.masterMgr = new _master2.default(vm);\n        }\n    }\n\n    /**\r\n     * 初始化页面创建\r\n     * 因为多个页面的问题，所以不是创建调用\r\n     * 统一回调\r\n     * @return {[type]} [description]\r\n     */\n\n\n    _createClass(Dispatch, [{\n        key: 'initCreate',\n        value: function initCreate() {\n            var options = this.options;\n\n            //createPointer,\n            //initPointer\n            var pointer = (0, _depend.initPointer)(options.initIndex, options.pagetotal, options.multiplePages);\n\n            this.pagePointer = pointer.initPointer;\n\n            //始化构建页面\n            this.create(pointer.createPointer, options.initIndex, 'init');\n        }\n\n        /**\r\n         *  创建普通页面\r\n         *  创建母版页面\r\n         *  createPointer  需要创建的页面索引\r\n         *  visiblePage       当前可视区页面索引\r\n         *  action         toPage/init/flipOver\r\n         *  toPageCallback 跳转页面支持回调通知\r\n         *  userStyle      规定创建的style属性\r\n         **/\n\n    }, {\n        key: 'create',\n        value: function create(createPage, visiblePage, action, toPageCallback, userStyle) {\n\n            //2016.1.20\n            //修正苗苗学问题 确保createPage不是undefined\n            if (undefined === createPage[0]) {\n                return;\n            }\n\n            var virtualMode = Xut.config.virtualMode,\n                self = this,\n                multiplePages = this.options.multiplePages,\n                //是否线性\n            total = createPage.length,\n                toPageAction = action === 'toPage',\n                //如果是跳转\n            filpOverAction = action === 'flipOver',\n                //如果是翻页\n\n            //使用第一个是分解可见页面\n            //将页码pageIndex转化成对应的chapter\n            createPids = _depend.conversionCid.call(this, createPage, visiblePage),\n\n\n            //收集创建的页面对象\n            //用于处理2个页面在切换的时候闪屏问题\n            //主要是传递createStyle自定义样式的处理\n            collectCreatePageBase = [],\n\n\n            //是否触发母版的自动时间\n            //因为页面每次翻页都会驱动auto事件\n            //但是母版可能是共享的\n            createMaster = false,\n\n\n            //收集完成回调\n            collectCallback = function () {\n                //收集创建页码的数量\n                var createContent = 0;\n                return function (callback) {\n                    ++createContent;\n                    if (createContent === total) {\n                        callback();\n                    }\n                };\n            }(),\n\n\n            //构建执行代码\n            callbackAction = {\n                //初始化\n                init: function init() {\n                    collectCallback(function () {\n                        self._loadPage('init');\n                    });\n                },\n\n                //翻页\n                flipOver: function flipOver() {\n                    collectCallback(function () {\n                        self.autoRun({ //翻页\n                            'createPointer': createPids,\n                            'createMaster': createMaster\n                        });\n                    });\n                },\n\n                //跳转\n                toPage: function toPage() {\n                    collectCallback(function () {\n                        toPageCallback(collectCreatePageBase);\n                    });\n                }\n            };\n\n            //pid=>chpterData\n            var results = (0, _depend.conversionPids)(createPids);\n\n            //如果是最后一页\n            //没有对应的虚拟数据，取前一页的\n            if (virtualMode && !results.length) {\n                (function () {\n                    var virtualPid = _.extend([], createPids);\n                    createPids.forEach(function (pid, index) {\n                        virtualPid.splice(index, 1, --pid);\n                    });\n                    results = (0, _depend.conversionPids)(virtualPid);\n                })();\n            }\n\n            //页码转成数据\n            _.each(results, function (chapterData, index) {\n\n                //转化值\n                //chapterId => createPid\n                var createPid = createPids[index];\n\n                //createPid\n                //pageIndex\n                var conversion = _depend.conversionPageOpts.call(self, createPid, visiblePage);\n                var visiblePid = conversion.visiblePid;\n                var pageIndex = conversion.pageIndex;\n\n                ////////////////\n                // 如果启动了虚拟页面模式 //\n                ////////////////\n                var virtualPid = false; //虚拟页面的pid编号\n                var virtualOffset = false; //页面坐标left,right\n                if (virtualMode) {\n                    //页面位置\n                    virtualOffset = (0, _depend.offsetPage)(pageIndex);\n\n                    //获取新的chpater数据\n                    var fixCids = function fixCids(originalIndex) {\n                        var originalPid = _depend.conversionCid.call(self, [originalIndex]);\n                        return (0, _depend.conversionPids)([originalPid])[0];\n                    };\n\n                    ////////////\n                    //如果是翻页创建 //\n                    //由于是拼接的所以chapter移位了\n                    ////////////\n                    if (virtualOffset === 'left') {\n                        chapterData = fixCids(pageIndex / 2);\n                    }\n                    //修正右边chapter\n                    if (virtualOffset === 'right') {\n                        chapterData = fixCids((pageIndex - 1) / 2);\n                    }\n                }\n\n                if (total === 1) {\n                    self.options.chapterId = chapterData._id;\n                }\n\n                /**\r\n                 * 构件新的页面\r\n                 * masterFilter 母板过滤器回调函数\r\n                 * @param  {[type]} masterFilter [description]\r\n                 * @return {[type]}              [description]\r\n                 */\n                var createMgr = function createMgr(masterFilter) {\n\n                    //跳转的时候，创建新页面可以自动样式信息\n                    //优化设置，只是改变当前页面即可\n                    if (toPageAction && visiblePid !== createPid) {\n                        userStyle = undefined;\n                    }\n\n                    var dataOpts = {\n                        'pageIndex': pageIndex,\n                        'multiplePages': multiplePages,\n                        'pid': createPid, //页码chapterId\n                        'chapterDas': chapterData, //当前页面的chpater数据\n                        'visiblePid': visiblePid, //实际中页面显示的索引\n                        'userStyle': userStyle,\n                        'virtualPid': virtualPid, //pid\n                        'virtualOffset': virtualOffset //虚拟页面位置\n                    };\n\n                    //初始化构建页面对象\n                    //page\n                    //master\n                    var pageBase = this.create(dataOpts, pageIndex, masterFilter);\n\n                    //构建页面对象后\n                    //开始执行\n                    if (pageBase) {\n                        //开始线程任务\n                        //当为滑动模式,支持快速创建\n                        pageBase.startThreadTask(filpOverAction, function () {\n                            return callbackAction[action]();\n                        });\n\n                        //收集自定义样式的页面对象\n                        if (userStyle) {\n                            collectCreatePageBase.push(pageBase);\n                        }\n                    }\n                };\n\n                //母版层\n                if (chapterData.pptMaster && self.masterMgr) {\n                    createMgr.call(self.masterMgr, function () {\n                        //母版是否创建等待通知\n                        //母版是共享的所以不一定每次翻页都会创建\n                        //如果需要创建,则叠加总数\n                        ++total;\n                        createMaster = true;\n                    });\n                }\n\n                //页面层\n                createMgr.call(self.pageMgr);\n            });\n        }\n\n        /**\r\n         * 自动运行处理\r\n         *  流程四:执行自动触发动作\r\n         *   1.初始化创建页面完毕\r\n         *   2.翻页完毕\r\n         */\n\n    }, {\n        key: 'autoRun',\n        value: function autoRun(para) {\n            var options = this.options,\n                pagePointer = this.pagePointer,\n                prevIndex = pagePointer.leftIndex,\n                currIndex = pagePointer.currIndex,\n                nextIndex = pagePointer.rightIndex,\n                action = para ? para.action : '',\n                createPointer = para ? para.createPointer : '',\n                direction = this.direction,\n\n            //暂停的页面索引autorun\n            suspendIndex = action === 'init' ? '' : direction === 'next' ? prevIndex : nextIndex;\n\n            /**\r\n             * 存在2中模式的情况下\r\n             * 转化页码标记\r\n             */\n            if (createPointer) {\n                createPointer = _depend.conversionPageOpts.call(this, createPointer);\n            }\n\n            var data = {\n                'prevIndex': prevIndex,\n                'currIndex': currIndex,\n                'nextIndex': nextIndex,\n                'suspendIndex': suspendIndex,\n                'createPointer': createPointer,\n                'direction': direction,\n                'isQuickTurn': this.isQuickTurn,\n                //中断通知\n                'suspendCallback': options.suspendAutoCallback,\n                //构建完毕通知\n                'buildComplete': function buildComplete(scenarioId) {\n                    //==========================================\n                    //\n                    //      构建完成通知,用于处理历史缓存记录\n                    //      如果是调试模式\n                    //      && 不是收费提示页面\n                    //      && 多场景应用\n                    //\n                    //==========================================\n                    if (Xut.config.recordHistory && !options.isInApp && options.multiScenario) {\n                        var history;\n                        if (history = _controller.sceneController.sequence(scenarioId, currIndex)) {\n                            (0, _stroage._set)(\"history\", history);\n                        }\n                    }\n                },\n\n\n                //流程结束通知\n                //包括动画都已经结束了\n                'processComplete': function processComplete() {}\n            };\n\n            //页面自动运行\n            this.pageMgr.autoRun(data);\n\n            //模板自动运行\n            this.masterContext(function () {\n                //如果动作是初始化，或者触发了母版自动运行\n                //如果是越界处理\n                //console.log(action,this.isBoundary,para.createMaster)\n                if (action || this.isBoundary) {\n                    this.autoRun(data);\n                }\n            });\n\n            /**\r\n             * 触发自动通知\r\n             * @type {[type]}\r\n             */\n            var vm = this.vm;\n\n            switch (action) {\n                case 'init':\n                    //更新页码标示\n                    vm.$emit('change:pageUpdate', currIndex);\n                    resetToolbar.call(this);\n                    setTimeout(function () {\n                        $(\".xut-start-page\").hide().remove();\n                        $(\".xut-removelayer\").hide().remove();\n                    }, 0);\n                    break;\n                case 'toPage':\n                    //更新页码标示\n                    vm.$emit('change:pageUpdate', currIndex);\n                    resetToolbar.call(this);\n                    break;\n            }\n\n            /**\r\n             * 初始化与跳转针对翻页案例的设置逻辑\r\n             * @return {[type]} [description]\r\n             */\n            function resetToolbar() {\n                //不显示首尾对应的按钮\n                if (currIndex == 0) {\n                    vm.$emit('change:hidePrev');\n                } else if (currIndex == options.pagetotal - 1) {\n                    vm.$emit('change:hideNext');\n                    vm.$emit('change:showPrev');\n                } else {\n                    vm.$emit('change:showNext');\n                    vm.$emit('change:showPrev');\n                }\n            }\n\n            /**\r\n             * 线性结构\r\n             * 保存目录索引\r\n             */\n            if (!options.multiScenario) {\n                (0, _stroage._set)(\"pageIndex\", currIndex);\n            }\n\n            /**\r\n             * 解锁翻页\r\n             * 允许继续执行下一个翻页作用\r\n             */\n            if (this.unfliplock) {\n                this.unfliplock();\n                this.unfliplock = null;\n            }\n\n            //关闭快速翻页\n            this.isQuickTurn = false;\n        }\n\n        /**\r\n         * 滑动处理\r\n         *  1 滑动\r\n         *  2 反弹\r\n         *  3 翻页\r\n         */\n\n    }, {\n        key: 'move',\n        value: function move() {\n            var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n            var action = _ref.action;\n            var speed = _ref.speed;\n            var distance = _ref.distance;\n            var leftIndex = _ref.leftIndex;\n            var pageIndex = _ref.pageIndex;\n            var rightIndex = _ref.rightIndex;\n            var direction = _ref.direction;\n\n\n            var currIndex = pageIndex;\n\n            //用户强制直接切换模式\n            //禁止页面跟随滑动\n            if (this.options.pageFlip && action == 'flipMove') {\n                return;\n            }\n\n            //移动的距离\n            var moveDistance = (0, _depend.calculateDistance)(action, distance, direction);\n\n            //视觉差页面滑动\n            var currObj = this.pageMgr.abstractGetPageObj(currIndex);\n\n            // if(!currObj) return\n            var chapterData = currObj.chapterDas;\n            var nodes = void 0;\n            if (chapterData && chapterData.nodes) {\n                nodes = chapterData.nodes;\n            }\n\n            //通知page模块\n            this.pageMgr.move(leftIndex, currIndex, rightIndex, direction, speed, action, moveDistance);\n\n            //通知视觉差模块\n            this.masterContext(function () {\n                this.move(leftIndex, currIndex, rightIndex, direction, moveDistance, action, speed, nodes);\n            });\n\n            //更新页码标示\n            'flipOver' === action && setTimeout(function () {\n                this.vm.$emit('change:pageUpdate', direction === 'next' ? rightIndex : leftIndex);\n            }.bind(this), 0);\n        }\n\n        /**\r\n         * 翻页松手后\r\n         * 暂停页面的各种活动动作\r\n         * @param  {[type]} pointers [description]\r\n         * @return {[type]}          [description]\r\n         */\n\n    }, {\n        key: 'suspend',\n        value: function suspend(pointers) {\n            //关闭层事件\n            this.pageMgr.suspend(pointers);\n            this.masterContext(function () {\n                this.suspend(pointers);\n            });\n\n            //目录栏\n            (0, _index.closeNavbar)();\n            //复位工具栏\n            this.vm.$emit('change:resetToolbar');\n        }\n\n        /**\r\n         * 翻页动画完毕后\r\n         * @return {[type]}              [description]\r\n         */\n\n    }, {\n        key: 'complete',\n        value: function complete(direction, pagePointer, unfliplock, isQuickTurn) {\n            //方向\n            this.direction = direction;\n            //是否快速翻页\n            this.isQuickTurn = isQuickTurn || false;\n            //解锁\n            this.unfliplock = unfliplock;\n            //清理上一个页面\n            this._clearPage(pagePointer.destroyPointer);\n            this._updatePointer(pagePointer);\n            //预创建下一页\n            this._advanceCreate(direction, pagePointer);\n        }\n\n        /**\r\n         * 页面跳转切换处\r\n         * @param  {[type]} data [description]\r\n         * @return {[type]}      [description]\r\n         */\n\n    }, {\n        key: 'jumpPage',\n        value: function jumpPage(data) {\n\n            Xut.View.ShowBusy();\n\n            //如果是非线性,创建页面修改\n            if (!this.options.multiplePages) {\n                data.create = [data.targetIndex];\n                data.destroy = [data.currIndex];\n                data.ruleOut = [data.targetIndex];\n                data.pagePointer = {\n                    currIndex: data.targetIndex\n                };\n            }\n\n            //执行页面切换\n            (0, _switch2.default)(this, data, function (data) {\n                this._updatePointer(data.pagePointer);\n                this.autoRun({\n                    'action': 'toPage',\n                    'createPointer': data['create']\n                });\n                Xut.View.HideBusy();\n            });\n        }\n\n        /**\r\n         * 调用母版管理器\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'masterContext',\n        value: function masterContext(callback) {\n            if (this.masterMgr) {\n                callback.call(this.masterMgr);\n            }\n        }\n\n        /**\r\n         * 销毁接口\r\n         * 对应多场景操作\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            this.pageMgr.destroy();\n            this.masterContext(function () {\n                this.destroy();\n            });\n        }\n\n        /**\r\n         * 清理页面结构\r\n         * @param  {[type]} clearPageIndex [description]\r\n         * @return {[type]}                [description]\r\n         */\n\n    }, {\n        key: '_clearPage',\n        value: function _clearPage(clearPageIndex) {\n            this.pageMgr.clearPage(clearPageIndex);\n        }\n\n        /**\r\n         * 更新页码索引标示\r\n         * @param  {[type]} pagePointer [description]\r\n         * @return {[type]}             [description]\r\n         */\n\n    }, {\n        key: '_updatePointer',\n        value: function _updatePointer(pagePointer) {\n            this.pagePointer = pagePointer;\n        }\n\n        /**\r\n         * 预创建新页面\r\n         * @param  {[type]} direction   [description]\r\n         * @param  {[type]} pagePointer [description]\r\n         * @return {[type]}             [description]\r\n         */\n\n    }, {\n        key: '_advanceCreate',\n        value: function _advanceCreate(direction, pagePointer) {\n            var pagetotal = this.options.pagetotal,\n                vm = this.vm,\n                createPointer = pagePointer.createPointer,\n                destroyPointer = pagePointer.destroyPointer,\n\n            //清理页码\n            clear = function clear() {\n                delete pagePointer.createPointer;\n                delete pagePointer.destroyPointer;\n            },\n\n            //创建新的页面对象\n            createNextContainer = function createNextContainer(createPointer, currIndex) {\n                this.create([createPointer], currIndex, 'flipOver');\n            };\n\n            //如果是右边翻页\n            if (direction === 'next') {\n                //首尾无须创建页面\n                if (pagePointer.currIndex === pagetotal - 1) {\n                    this.autoRun();\n                    //如果总数只有2页，那么首页的按钮是关闭的，需要显示\n                    if (pagetotal == 2) {\n                        vm.$emit('change:showPrev');\n                    }\n                    //多页处理\n                    vm.$emit('change:hideNext');\n                    return;\n                }\n                if (createPointer < pagetotal) {\n                    //创建的页面\n                    createNextContainer.call(this, createPointer, pagePointer.currIndex);\n                    clear();\n                    vm.$emit('change:showPrev');\n                    return;\n                }\n            }\n\n            //如果是左边翻页\n            if (direction === 'prev') {\n                //首尾无须创建页面\n                if (pagePointer.currIndex === 0) {\n                    this.autoRun();\n                    //如果总数只有2页，那么首页的按钮是关闭的，需要显示\n                    if (pagetotal == 2) {\n                        vm.$emit('change:showNext');\n                    }\n                    vm.$emit('change:hidePrev');\n                    return;\n                }\n                if (pagePointer.currIndex > -1) {\n                    //创建的页面\n                    createNextContainer.call(this, createPointer, pagePointer.currIndex);\n                    clear();\n                    vm.$emit('change:showNext');\n                    return;\n                }\n            }\n\n            clear();\n\n            return;\n        }\n\n        /**\r\n         * 加载页面事件与动作\r\n         * @param  {[type]} action [description]\r\n         * @return {[type]}        [description]\r\n         */\n\n    }, {\n        key: '_loadPage',\n        value: function _loadPage(action) {\n            var self = this;\n\n            //触发自动任务\n            function trigger() {\n                self.autoRun({\n                    'action': 'init'\n                });\n            }\n\n            //加载主场景页面\n            function firstLoading() {\n\n                $(\"#scene-main\").css({\n                    'visibility': 'visible'\n                });\n\n                if (window.GLOBALIFRAME) {\n                    trigger();\n                    return;\n                }\n                //获取应用的状态\n                if (Xut.Application.getAppState()) {\n                    //保留启动方法\n                    var pre = Xut.Application.LaunchApp;\n                    Xut.Application.LaunchApp = function () {\n                        pre();\n                        trigger();\n                    };\n                } else {\n                    trigger();\n                }\n            }\n\n            //创建完成回调\n            self.vm.$emit('change:createComplete', function () {\n                if (self.options.multiScenario) {\n                    trigger();\n                } else {\n                    //第一次加载\n                    //进入应用\n                    firstLoading();\n                }\n            });\n        }\n    }]);\n\n    return Dispatch;\n}();\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/lib/manager/dispatch/index.js\n ** module id = 115\n ** module chunks = 0\n **/"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;","sourceRoot":""}