{"version":3,"file":"0.cd9fee3c7d00b659bfaa.hot-update.js","sources":["webpack:///./src/lib/toolbar/bookmark.js?3e0f"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**\r\n书签栏\r\n加入这个书签功能后，可以让用户自由选择哪页是需要保存记录的\r\nparam options object\r\nexample {parent:页面容器,pageId:chapterId,seasonId:seasionId}\r\nn\n\nvar _tap = require('../tap');\n\nvar _index = require('../util/index');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar icons = {\n    hide: 'images/icons/arrowDown.svg'\n},\n    sLineHeiht = parseInt($('body').css('font-size')) || 16,\n    //行高\nBOOKCACHE; //书签缓存\n\n\nvar BookMark = function () {\n    function BookMark() {\n        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n        var parent = _ref.parent;\n        var pageId = _ref.pageId;\n        var seasonId = _ref.seasonId;\n\n        _classCallCheck(this, BookMark);\n\n        this.parent = parent;\n        this.pageId = pageId;\n        this.seasonId = seasonId;\n\n        this.screenSize = Xut.config.screenSize;\n        this.sHeight = this.screenSize.height;\n        this.sWidth = this.screenSize.width;\n\n        //是否已存储\n        this.isStored = false;\n        this.init();\n    }\n\n    /**\r\n     * 初始化\r\n     * @return {[type]} [description]\r\n     */\n\n\n    _createClass(BookMark, [{\n        key: 'init',\n        value: function init() {\n            var $bookMark = this.createBookMark(),\n                dom = this.parent[0],\n                that = this;\n\n            this.parent.append($bookMark);\n            this.bookMarkMenu = $bookMark.eq(0);\n            //显示书签\n            setTimeout(function () {\n                that.restore();\n            }, 20);\n            //获取历史记录\n            BOOKCACHE = this.getHistory();\n\n            //邦定用户事件\n            (0, _tap.bindTap)(dom, {\n                end: this\n            });\n        }\n\n        /**\r\n         * 创建书签\r\n         * @return {[object]} [jquery生成的dom对象]\r\n         */\n\n    }, {\n        key: 'createBookMark',\n        value: function createBookMark() {\n            var height = sLineHeiht * 3,\n                // menu的高为3em\n            box = '<div class=\"xut-bookmark-menu\" style=\"width:100%;height:{0}px;left:0;top:{1}px;\">' + '<div class=\"xut-bookmark-wrap\">' + '<div class=\"xut-bookmark-add\">加入书签</div>' + '<div class=\"xut-bookmark-off\" style=\"background-image:url({2})\"></div>' + '<div class=\"xut-bookmark-view\">书签记录</div>' + '</div>' + '</div>' + '<div class=\"xut-bookmark-list\" style=\"display:none;width:100%;height:{3}px;\">' + '<ul class=\"xut-bookmark-head\">' + '<li class=\"xut-bookmark-back\">返回</li>' + '<li>书签</li>' + '</ul>' + '<ul class=\"xut-bookmark-body\"></ul>' + '</div>';\n            box = String.format(box, height, this.sHeight, icons.hide, this.sHeight);\n            this.markHeight = height;\n            return $(box);\n        }\n\n        /**\r\n         * 生成书签列表\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'createMarkList',\n        value: function createMarkList() {\n            var tmp,\n                seasonId,\n                pageId,\n                list = '',\n                box = '',\n                self = this;\n\n            //取历史记录\n            _.each(BOOKCACHE, function (mark) {\n                tmp = mark.split('-');\n                seasonId = tmp[0];\n                pageId = tmp[1];\n                mark = self.getMarkId(seasonId, pageId);\n                list += '<li><a data-mark=\"' + mark + '\" class=\"xut-bookmark-id\" href=\"javascript:0\">第' + pageId + '页</a><a class=\"xut-bookmark-del\" data-mark=\"' + mark + '\" href=\"javascript:0\">X</a></li>';\n            });\n\n            return list;\n        }\n\n        /**\r\n         * 创建存储标签\r\n         * 存储格式 seasonId-pageId\r\n         * @return {string} [description]\r\n         */\n\n    }, {\n        key: 'getMarkId',\n        value: function getMarkId(seasonId, pageId) {\n            return seasonId + '-' + pageId;\n        }\n\n        /**\r\n         * 获取历史记录\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'getHistory',\n        value: function getHistory() {\n            var mark = (0, _index._get)('bookMark');\n            if (mark) {\n                return mark.split(',');\n            }\n            return [];\n        }\n\n        /**\r\n         * 添加书签\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'addBookMark',\n        value: function addBookMark() {\n            var key;\n\n            this.updatePageInfo();\n            key = this.getMarkId(this.seasonId, this.pageId);\n\n            //避免重复缓存\n            if (BOOKCACHE.indexOf(key) > -1) {\n                return;\n            }\n            BOOKCACHE.push(key);\n            (0, _index._set)('bookMark', BOOKCACHE);\n        }\n\n        /**\r\n         * 更新页信息\r\n         *  针对母板层上的书签\r\n         */\n\n    }, {\n        key: 'updatePageInfo',\n        value: function updatePageInfo() {\n            var pageData = Xut.Presentation.GetPageData();\n            this.pageId = pageData._id;\n            this.seasonId = pageData.seasonId;\n        }\n\n        /**\r\n         * 删除书签\r\n         * @param {object} [key] [事件目标对象]\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'delBookMark',\n        value: function delBookMark(target) {\n            if (!target || !target.dataset) return;\n\n            var key = target.dataset.mark,\n                index = BOOKCACHE.indexOf(key);\n\n            BOOKCACHE.splice(index, 1);\n            (0, _index._set)('bookMark', BOOKCACHE);\n\n            if (BOOKCACHE.length == 0) {\n                (0, _index._remove)('bookMark');\n            }\n\n            //移除该行\n            $(target).parent().remove();\n        }\n\n        /**\r\n         * 显示书签\r\n         * @param {object} [target] [事件目标对象]\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'viewBookMark',\n        value: function viewBookMark(target) {\n            var $bookMarkList,\n                list = this.createMarkList();\n\n            if (this.bookMarkList) {\n                $bookMarkList = this.bookMarkList;\n            } else {\n                $bookMarkList = $(target).parent().parent().next();\n            }\n            //更新书签内容\n            $bookMarkList.find('.xut-bookmark-body').html(list);\n            this.bookMarkList = $bookMarkList;\n            $bookMarkList.fadeIn();\n        }\n\n        /**\r\n         * 点击放大效果\r\n         * @param  {[object]} target [事件目标对象]\r\n         * @return {[type]}      [description]\r\n         */\n\n    }, {\n        key: 'iconManager',\n        value: function iconManager(target) {\n            var $icon = this.bookMarkIcon = $(target),\n                restore = this.iconRestore;\n\n            $icon.css({\n                'transform': 'scale(1.2)',\n                'transition-duration': '500ms'\n            })[0].addEventListener(Xut.style.transitionEnd, restore.bind(this), false);\n        }\n\n        /**\r\n         * 复原按钮\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'iconRestore',\n        value: function iconRestore() {\n            this.bookMarkIcon.css('transform', '');\n        }\n\n        /**\r\n         * 跳转到书签页\r\n         * @param  {[type]} target [description]\r\n         * @return {[type]}        [description]\r\n         */\n\n    }, {\n        key: 'goBookMark',\n        value: function goBookMark(target) {\n            if (!target || !target.dataset) return;\n\n            var key = target.dataset.mark.split('-');\n            var seasonId = Number(key[0]);\n            var pageId = Number(key[1]);\n\n            this.updatePageInfo();\n            //关闭书签列表\n            this.backBookMark();\n\n            //忽略当前页的跳转\n            if (this.pageId == pageId && this.seasonId == seasonId) {\n                return;\n            }\n\n            Xut.View.LoadScenario({\n                'scenarioId': seasonId,\n                'chapterId': pageId\n            });\n        }\n\n        /**\r\n         * 书签回退键\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'backBookMark',\n        value: function backBookMark() {\n            this.bookMarkList.fadeOut();\n        }\n\n        /**\r\n         * 邦定事件\r\n         * @param  {[type]} evt [事件]\r\n         * @return {[type]}     [description]\r\n         */\n\n    }, {\n        key: 'handleEvent',\n        value: function handleEvent(evt) {\n            var target = evt.target;\n            switch (target.className) {\n                //加入书签\n                case 'xut-bookmark-add':\n                    this.addBookMark();\n                    this.iconManager(target);\n                    break;\n                //显示书签记录\n                case 'xut-bookmark-view':\n                    this.viewBookMark(target);\n                    this.iconManager(target);\n                    break;\n                //关闭书签\n                case 'xut-bookmark-off':\n                    this.closeBookMark(target);\n                    break;\n                //返回书签主菜单\n                case 'xut-bookmark-back':\n                    this.backBookMark();\n                    break;\n                //删除书签记录\n                case 'xut-bookmark-del':\n                    this.delBookMark(target);\n                    break;\n                //跳转到书签页\n                case 'xut-bookmark-id':\n                    this.goBookMark(target);\n                    break;\n                default:\n                    //console.log(target.className)\n                    break;\n            }\n        }\n\n        /**\r\n         * 关闭书签菜单\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'closeBookMark',\n        value: function closeBookMark(target) {\n            this.bookMarkMenu.css({\n                transform: 'translate3d(0,0,0)',\n                'transition-duration': '1s'\n            });\n        }\n\n        /**\r\n         * 恢复书签菜单\r\n         */\n\n    }, {\n        key: 'restore',\n        value: function restore() {\n            this.bookMarkMenu.css({\n                transform: 'translate3d(0,-' + this.markHeight + 'px,0)',\n                'transition-duration': '1s'\n            });\n        }\n\n        /**\r\n         * 销毁书签\r\n         * @return {[type]} [description]\r\n         */\n\n    }, {\n        key: 'destroy',\n        value: function destroy() {\n            var dom = this.parent[0];\n\n            dom.removeEventListener('touchend', this, false);\n            dom.removeEventListener('mouseup', this, false);\n\n            //菜单部分\n            if (this.bookMarkMenu) {\n                this.bookMarkMenu.remove();\n                this.bookMarkMenu = null;\n            }\n\n            //列表部分\n            if (this.bookMarkList) {\n                this.bookMarkList.remove();\n                this.bookMarkList = null;\n            }\n\n            //按钮效果\n            if (this.bookMarkIcon) {\n                this.bookMarkIcon[0].removeEventListener(Xut.style.transitionEnd, this.iconRestore, false);\n                this.bookMarkIcon = null;\n            }\n\n            this.parent = null;\n        }\n    }]);\n\n    return BookMark;\n}();\n\nexports.default = BookMark;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/lib/toolbar/bookmark.js\n ** module id = 148\n ** module chunks = 0\n **/"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;","sourceRoot":""}